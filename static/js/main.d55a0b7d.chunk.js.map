{"version":3,"sources":["logo.svg","CryptoList.js","Crypto.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CryptoList","cryptoList","this","props","react_default","a","createElement","className","map","currency","symbol","class","last","Component","Crypto","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchData","axios","get","then","response","oldCryptoList","state","_loop","key","newRate","data","oldRate","find","push","undefined","setState","console","log","onFilter","filter","inputValue","value","trim","toUpperCase","filteredCryptoList","rate","includes","_this2","setInterval","_this3","type","placeholder","ref","input","onChange","src_CryptoList_0","App","src","logo","alt","src_Crypto_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kSCgDzBC,sMA3CP,IAAMC,EAAaC,KAAKC,MAAMF,WAE9B,OAmBIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACVN,EAAWO,IAAI,SAAAC,GAAQ,OACpBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UACKG,EAASA,SADd,MAC2BA,EAASC,OADpC,MAGAN,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAWE,EAASE,OAAQF,EAASG,iBA9B1CC,+BCiGVC,cA9FX,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,KAAMC,KAoBVkB,UAAY,WACRC,IAAMC,IAAI,qCACLC,KAAK,SAAAC,GAEF,IAAIxB,EAAa,GACbyB,EAAgBX,EAAKY,MAAM1B,WAHjB2B,EAAA,SAKLC,GAEL,IAAIC,EAAU,CACVrB,SAAUoB,EACVjB,KAAMa,EAASM,KAAKF,GAAKjB,KACzBF,OAAQe,EAASM,KAAKF,GAAKnB,QAS3BsB,EAAUN,EAAcO,KAAK,SAAAD,GAAO,OAAIA,EAAQvB,WAAaqB,EAAQrB,WACzER,EAAWiC,KAAKJ,QAIAK,IAAZH,EACIF,EAAQlB,KAAOoB,EAAQpB,KACvBkB,EAAQnB,MAAQ,QACTmB,EAAQlB,KAAOoB,EAAQpB,KAC9BkB,EAAQnB,MAAQ,OACTmB,EAAQlB,KAAOoB,EAAQpB,QAC9BkB,EAAQnB,MAAQ,QAIpBmB,EAAQnB,MAAQ,QA7BxB,IAAK,IAAIkB,KAAOJ,EAASM,KAAMH,EAAtBC,GAiCTd,EAAKqB,SAAS,CAAEnC,eAEhBoC,QAAQC,IAAIrC,MA/DLc,EAmEnBwB,SAAW,WACP,IAAIC,EAASzB,EAAK0B,WAAWC,MAAMC,OAAOC,cACtCC,EAAqB9B,EAAKY,MAAM1B,WAEpC4C,EAAqBA,EAAmBL,OAAO,SAAAM,GAC3C,OAAOA,EAAKrC,SAASsC,SAASP,KAGlCzB,EAAKqB,SAAS,CAAEnC,WAAY4C,KAxE5B9B,EAAKY,MAAQ,CACT1B,WAAY,IAJDc,mFAWC,IAAAiC,EAAA9C,KAChB+C,YAAY,WACsB,KAA1BD,EAAKP,WAAWC,OAChBM,EAAK3B,aAEV,KAEHnB,KAAKmB,6CA4DA,IAAA6B,EAAAhD,KACL,OACIE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACIC,UAAU,SACV4C,KAAK,OACLC,YAAY,SACZC,IAAK,SAAAC,GAAK,OAAIJ,EAAKT,WAAaa,GAChCC,SAAUrD,KAAKqC,WAEnBnC,EAAAC,EAAAC,cAACkD,EAAD,CAAYvD,WAAYC,KAAKyB,MAAM1B,qBAzF9BY,aCcN4C,mLAZX,OACErD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKoD,IAAKC,IAAMpD,UAAU,WAAWqD,IAAI,SACzCxD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,gBAEFH,EAAAC,EAAAC,cAACuD,EAAD,cARUhD,aCOEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.d55a0b7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ed43bc12.svg\";","import React, { Component } from 'react';\r\nimport './CryptoList.css'\r\n\r\nclass CryptoList extends Component {\r\n    render() {\r\n        const cryptoList = this.props.cryptoList;\r\n\r\n        return (\r\n            // <ul className='Lista'>\r\n            //     {cryptoList.map(currency =>\r\n            //         <li className='Waluta' key={currency.currency}>\r\n\r\n            //             <span className='Element'>Last rate:</span>\r\n            //             <span className='Element'>{currency.last}</span>\r\n            //             <span className='Element'><strong>{currency.currency}</strong></span>\r\n\r\n            //             <span className='Element'>[ {currency.symbol} ]</span>\r\n\r\n\r\n            //         </li>\r\n\r\n\r\n\r\n            //     )}\r\n            // </ul>\r\n\r\n            <div className='Glowny'>\r\n                {cryptoList.map(currency =>\r\n                    <div className='ElementDiv'>\r\n                        <h3>\r\n                            {currency.currency} [ {currency.symbol} ]\r\n                        </h3>\r\n                        <span>Last Rate: </span>\r\n                        <span className={currency.class}>{currency.last}\r\n                        </span>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default CryptoList;","import React, { Component } from 'react';\r\nimport './Crypto.css'\r\nimport CryptoList from './CryptoList'\r\nimport axios from 'axios';\r\n\r\nclass Crypto extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            cryptoList: []\r\n            // Dodajemy nowa liste. I na przykladzie poprzedniej wyszukiwarki renderujemy ta lub poprzednia cryptoListe.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            if (this.inputValue.value === '') {\r\n                this.fetchData();\r\n            }\r\n        }, 5000);\r\n\r\n        this.fetchData();\r\n    }\r\n\r\n    fetchData = () => {\r\n        axios.get('https://blockchain.info/pl/ticker')\r\n            .then(response => {\r\n                // console.log(response);\r\n                let cryptoList = [];\r\n                let oldCryptoList = this.state.cryptoList;\r\n\r\n                for (let key in response.data) {\r\n                    // console.log(key, response.data[key])\r\n                    let newRate = {\r\n                        currency: key,\r\n                        last: response.data[key].last,\r\n                        symbol: response.data[key].symbol,\r\n                    }\r\n                    // Alternatywny Zapis\r\n                    // let object = {\r\n                    //     currency: key,\r\n                    //     ...response.data[key]\r\n                    // }\r\n\r\n                    // Wyszukujemy objekt ze starej bazy pasujacy do nowej bazy. Wyzej nowa wersja np.$, nizej stara wersja.\r\n                    let oldRate = oldCryptoList.find(oldRate => oldRate.currency === newRate.currency);\r\n                    cryptoList.push(newRate);\r\n\r\n                    // console.log(oldRate); Powinno byc undifined.\r\n\r\n                    if (oldRate !== undefined) {\r\n                        if (newRate.last > oldRate.last) {\r\n                            newRate.class = 'green';\r\n                        } else if (newRate.last < oldRate.last) {\r\n                            newRate.class = 'red';\r\n                        } else if (newRate.last = oldRate.last) {\r\n                            newRate.class = 'blue';\r\n                        }\r\n                    }\r\n                    else {\r\n                        newRate.class = 'blue';\r\n                    }\r\n                }\r\n\r\n                this.setState({ cryptoList });\r\n\r\n                console.log(cryptoList);\r\n            })\r\n    }\r\n\r\n    onFilter = () => {\r\n        let filter = this.inputValue.value.trim().toUpperCase();\r\n        let filteredCryptoList = this.state.cryptoList;\r\n\r\n        filteredCryptoList = filteredCryptoList.filter(rate => {\r\n            return rate.currency.includes(filter);\r\n        });\r\n\r\n        this.setState({ cryptoList: filteredCryptoList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input\r\n                    className='Search'\r\n                    type='text'\r\n                    placeholder='Filter'\r\n                    ref={input => this.inputValue = input}\r\n                    onChange={this.onFilter}\r\n                />\r\n                <CryptoList cryptoList={this.state.cryptoList} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Crypto;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Crypto from './Crypto';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Crypto Rate</h1>\n        </header>\n        <Crypto />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}